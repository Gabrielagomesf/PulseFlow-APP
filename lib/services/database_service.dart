import 'package:mongo_dart/mongo_dart.dart';
import '../models/patient.dart';
import '../config/database_config.dart';

class DatabaseService {
  static final DatabaseService _instance = DatabaseService._internal();
  factory DatabaseService() => _instance;
  DatabaseService._internal();

  Db? _db;
  bool _isConnecting = false;
  static const int _maxRetries = 3;
  static const Duration _retryDelay = Duration(seconds: 2);

  Future<void> _ensureConnection() async {
    if (_db != null && _db!.isConnected) {
      print('Conex√£o j√° est√° ativa');
      return;
    }

    if (_isConnecting) {
      print('J√° existe uma tentativa de conex√£o em andamento');
      return;
    }

    _isConnecting = true;
    int retryCount = 0;

    while (retryCount < _maxRetries) {
      try {
        if (_db == null) {
          print('Criando nova inst√¢ncia do banco...');
          final uri = DatabaseConfig.connectionString;
          if (uri.isEmpty) {
            throw 'String de conex√£o n√£o configurada';
          }
          _db = await Db.create(uri);
          print('Inst√¢ncia do banco criada, tentando abrir conex√£o...');
        }

        if (!_db!.isConnected) {
          print('Tentando abrir conex√£o... (tentativa ${retryCount + 1})');
          await _db!.open();
          print('Conex√£o estabelecida com sucesso');
          
          // Verificar conex√£o tentando listar as cole√ß√µes
          try {
            await _db!.getCollectionNames();
            print('Conex√£o verificada com sucesso');
            _isConnecting = false;
            return;
          } catch (e) {
            print('Erro ao verificar conex√£o: $e');
            await _db!.close();
            _db = null;
            throw 'Falha na verifica√ß√£o da conex√£o';
          }
        }
      } catch (e, stack) {
        print('Erro ao conectar (tentativa ${retryCount + 1}): $e');
        print('Stack trace: $stack');
        
        if (_db != null) {
          try {
            await _db!.close();
          } catch (e) {
            print('Erro ao fechar conex√£o: $e');
          }
          _db = null;
        }

        retryCount++;
        if (retryCount < _maxRetries) {
          print('Aguardando ${_retryDelay.inSeconds} segundos antes da pr√≥xima tentativa...');
          await Future.delayed(_retryDelay);
        } else {
          _isConnecting = false;
          throw 'Falha ao conectar ap√≥s $_maxRetries tentativas: $e';
        }
      }
    }
  }

  Future<void> connect() async {
    try {
      await _ensureConnection();
    } catch (e) {
      print('Erro ao conectar: $e');
      rethrow;
    }
  }

  Future<void> disconnect() async {
    if (_db != null) {
      try {
        if (_db!.isConnected) {
          print('Fechando conex√£o...');
          await _db!.close();
          print('Conex√£o fechada com sucesso');
        }
      } catch (e) {
        print('Erro ao fechar conex√£o: $e');
        rethrow;
      } finally {
        _db = null;
      }
    }
  }

  Future<Patient> createPatient(Patient patient) async {
    try {
      print('üóÑÔ∏è Iniciando cria√ß√£o de paciente no banco de dados');
      await _ensureConnection();
      
      final collection = _db!.collection(DatabaseConfig.patientsCollection);
      print('üìß Criando paciente: ${patient.email}');
      
      // Remover o ID do JSON antes de inserir
      final patientJson = patient.toJson();
      patientJson.remove('_id');
      
      print('üìÑ Dados do paciente preparados para inser√ß√£o');
      print('üìä Campos: ${patientJson.keys.toList()}');
      
      // Tentar inserir o documento
      final result = await collection.insert(patientJson);
      print('üìù Resultado da inser√ß√£o: $result');
      
      // Verificar se houve erro do Atlas Free Tier
      if (result['ok'] == 0 && result['code'] == 8000) {
        print('‚ö†Ô∏è Erro do Atlas Free Tier detectado, mas documento pode ter sido criado');
        print('üîÑ Tentando buscar o documento pelo email...');
        
        // Tentar buscar o documento pelo email
        final createdPatient = await collection.findOne(where.eq('email', patient.email));
        if (createdPatient != null) {
          print('‚úÖ Paciente encontrado pelo email: ${createdPatient['_id']}');
          
          // Converter o ID para string hexadecimal antes de criar o objeto Patient
          final patientData = Map<String, dynamic>.from(createdPatient);
          patientData['_id'] = (patientData['_id'] as ObjectId).toHexString();
          
          print('üîÑ Convertendo dados para objeto Patient...');
          final patientObject = Patient.fromJson(patientData);
          
          print('‚úÖ Objeto Patient criado com ID: ${patientObject.id}');
          return patientObject;
        } else {
          throw 'Erro ao criar paciente: Documento n√£o encontrado ap√≥s inser√ß√£o';
        }
      }
      
      print('üÜî ID gerado pelo MongoDB: ${result['_id']}');
      
      if (result['_id'] == null) {
        print('‚ùå ERRO: MongoDB n√£o retornou ID');
        throw 'Erro ao criar paciente: ID n√£o gerado';
      }
      
      print('‚úÖ ID gerado com sucesso, buscando paciente criado...');
      
      // Buscar o paciente rec√©m-criado para garantir que temos todos os dados
      final createdPatient = await collection.findOne(where.id(result['_id']));
      if (createdPatient == null) {
        print('‚ùå ERRO: N√£o foi poss√≠vel recuperar o paciente ap√≥s cria√ß√£o');
        throw 'Erro ao recuperar paciente ap√≥s cria√ß√£o';
      }
      
      print('‚úÖ Paciente recuperado do banco: ${createdPatient['_id']}');
      
      // Converter o ID para string hexadecimal antes de criar o objeto Patient
      final patientData = Map<String, dynamic>.from(createdPatient);
      if (patientData['_id'] is ObjectId) {
        patientData['_id'] = (patientData['_id'] as ObjectId).toHexString();
      } else {
        patientData['_id'] = patientData['_id'].toString();
      }
      
      print('üîÑ ID convertido para string: ${patientData['_id']}');
      print('üîÑ Convertendo dados para objeto Patient...');
      final patientObject = Patient.fromJson(patientData);
      
      print('‚úÖ Objeto Patient criado com ID: ${patientObject.id}');
      return patientObject;
    } catch (e, stack) {
      print('‚ùå Erro ao criar paciente: $e');
      print('üìã Stack trace: $stack');
      rethrow;
    }
  }

  Future<Patient?> getPatientByEmail(String email) async {
    try {
      await _ensureConnection();
      
      final collection = _db!.collection(DatabaseConfig.patientsCollection);
      print('Buscando paciente por email: $email');
      
      final result = await collection.findOne(where.eq('email', email));
      if (result != null) {
        print('Paciente encontrado: ${result['_id']}');
        
        // Converter o ID para string hexadecimal antes de criar o objeto Patient
        final patientData = Map<String, dynamic>.from(result);
        if (patientData['_id'] is ObjectId) {
          patientData['_id'] = (patientData['_id'] as ObjectId).toHexString();
        } else {
          patientData['_id'] = patientData['_id'].toString();
        }
        
        print('üîÑ ID convertido para string: ${patientData['_id']}');
        
        return Patient.fromJson(patientData);
      }
      print('Paciente n√£o encontrado');
      return null;
    } catch (e, stack) {
      print('Erro ao buscar paciente: $e');
      print('Stack trace: $stack');
      rethrow;
    }
  }

  Future<Patient?> getPatientById(ObjectId id) async {
    try {
      await _ensureConnection();
      
      final collection = _db!.collection(DatabaseConfig.patientsCollection);
      print('Buscando paciente por ID: $id');
      
      final result = await collection.findOne(where.id(id));
      if (result != null) {
        print('Paciente encontrado: ${result['_id']}');
        
        // Converter o ID para string hexadecimal antes de criar o objeto Patient
        final patientData = Map<String, dynamic>.from(result);
        if (patientData['_id'] is ObjectId) {
          patientData['_id'] = (patientData['_id'] as ObjectId).toHexString();
        } else {
          patientData['_id'] = patientData['_id'].toString();
        }
        
        print('üîÑ ID convertido para string: ${patientData['_id']}');
        
        return Patient.fromJson(patientData);
      }
      print('Paciente n√£o encontrado');
      return null;
    } catch (e, stack) {
      print('Erro ao buscar paciente: $e');
      print('Stack trace: $stack');
      rethrow;
    }
  }

  Future<Patient> updatePatient(ObjectId id, Patient patient) async {
    try {
      await _ensureConnection();
      
      final collection = _db!.collection(DatabaseConfig.patientsCollection);
      print('Atualizando paciente: $id');
      
      // Atualizar o documento
      final modifier = modify
        ..set('updatedAt', DateTime.now().toIso8601String());
      
      // Adicionar todos os campos do paciente ao modificador
      final patientJson = patient.toJson();
      patientJson.forEach((key, value) {
        if (key != '_id') { // N√£o atualizar o ID
          modifier.set(key, value);
        }
      });
      
      // Usar update() simples - compat√≠vel com Atlas Free Tier
      final result = await collection.update(
        where.id(id),
        modifier,
      );
      
      if (result['ok'] != 1) {
        throw 'Falha ao atualizar paciente';
      }
      
      // Buscar o paciente atualizado
      final updatedPatient = await collection.findOne(where.id(id));
      if (updatedPatient == null) {
        throw 'Paciente n√£o encontrado ap√≥s atualiza√ß√£o';
      }
      
      print('Paciente atualizado com sucesso');
      
      // Converter o ID para string hexadecimal antes de criar o objeto Patient
      final patientData = Map<String, dynamic>.from(updatedPatient);
      if (patientData['_id'] is ObjectId) {
        patientData['_id'] = (patientData['_id'] as ObjectId).toHexString();
      } else {
        patientData['_id'] = patientData['_id'].toString();
      }
      
      print('üîÑ ID convertido para string: ${patientData['_id']}');
      
      return Patient.fromJson(patientData);
    } catch (e, stack) {
      print('Erro ao atualizar paciente: $e');
      print('Stack trace: $stack');
      rethrow;
    }
  }

  Future<void> deletePatient(ObjectId id) async {
    try {
      await _ensureConnection();
      
      final collection = _db!.collection(DatabaseConfig.patientsCollection);
      print('Deletando paciente: $id');
      
      // Usar remove() simples - compat√≠vel com Atlas Free Tier
      final result = await collection.remove(where.id(id));
      
      if (result['ok'] != 1) {
        throw 'Falha ao deletar paciente';
      }
      
      if (result['n'] == 0) {
        throw 'Paciente n√£o encontrado';
      }
      
      print('Paciente deletado com sucesso');
    } catch (e, stack) {
      print('Erro ao deletar paciente: $e');
      print('Stack trace: $stack');
      rethrow;
    }
  }

  Future<void> setTwoFactorCode(String patientId, String code, DateTime expires) async {
    try {
      print('üîê Configurando 2FA para paciente ID: $patientId');
      await _ensureConnection();
      final collection = _db!.collection(DatabaseConfig.patientsCollection);
      
      // Converter string para ObjectId
      final objectId = ObjectId.parse(patientId);
      print('üîÑ ObjectId convertido: $objectId');
      
      // Usar update() simples - compat√≠vel com Atlas Free Tier
      final result = await collection.update(
        where.eq('_id', objectId),
        modify.set('twoFactorCode', code).set('twoFactorExpires', expires.toIso8601String()),
      );
      
      // Verificar se √© erro do Atlas Free Tier (c√≥digo 8000)
      if (result['ok'] == 0 && result['code'] == 8000) {
        print('‚ö†Ô∏è Aviso: MongoDB Atlas Free Tier - getLastError n√£o suportado, mas opera√ß√£o foi bem-sucedida');
        print('‚úÖ C√≥digo 2FA salvo com sucesso (ignorando erro do Atlas Free Tier)');
        return;
      }
      
      if (result['ok'] != 1) {
        throw 'Falha ao salvar c√≥digo 2FA: ${result['errmsg']}';
      }
      
      print('‚úÖ C√≥digo 2FA salvo com sucesso: $result');
    } catch (e) {
      print('‚ùå Erro ao salvar c√≥digo 2FA: $e');
      print('üìã PatientId recebido: $patientId');
      rethrow;
    }
  }

  Future<bool> validateTwoFactorCode(String patientId, String code) async {
    try {
      print('üîê Validando c√≥digo 2FA para paciente ID: $patientId');
      await _ensureConnection();
      final collection = _db!.collection(DatabaseConfig.patientsCollection);
      
      // Converter string para ObjectId
      final objectId = ObjectId.parse(patientId);
      print('üîÑ ObjectId convertido: $objectId');
      
      final result = await collection.findOne(where.eq('_id', objectId));
      if (result == null) {
        print('‚ùå Paciente n√£o encontrado');
        return false;
      }
      
      print('‚úÖ Paciente encontrado, verificando c√≥digo 2FA...');
      
      // Converter o ID para string antes de criar o objeto Patient
      final patientData = Map<String, dynamic>.from(result);
      patientData['_id'] = patientData['_id'].toString();
      
      final patient = Patient.fromJson(patientData);
      
      if (patient.twoFactorCode == code && patient.twoFactorExpires != null && patient.twoFactorExpires!.isAfter(DateTime.now())) {
        print('‚úÖ C√≥digo 2FA v√°lido, limpando c√≥digo...');
        
        // Limpa o c√≥digo ap√≥s uso usando update() simples
        final clearResult = await collection.update(
          where.eq('_id', objectId),
          modify.unset('twoFactorCode').unset('twoFactorExpires'),
        );
        
        // Verificar se √© erro do Atlas Free Tier (c√≥digo 8000)
        if (clearResult['ok'] == 0 && clearResult['code'] == 8000) {
          print('‚ö†Ô∏è Aviso: MongoDB Atlas Free Tier - getLastError n√£o suportado, mas c√≥digo foi limpo');
        } else if (clearResult['ok'] != 1) {
          print('‚ö†Ô∏è Aviso: Erro ao limpar c√≥digo 2FA: ${clearResult['errmsg']}');
        }
        
        print('‚úÖ C√≥digo 2FA limpo com sucesso');
        return true;
      }
      
      print('‚ùå C√≥digo 2FA inv√°lido ou expirado');
      return false;
    } catch (e) {
      print('‚ùå Erro ao validar c√≥digo 2FA: $e');
      print('üìã PatientId recebido: $patientId');
      rethrow;
    }
  }

  Future<void> setPasswordResetCode(String patientId, String code, DateTime expires) async {
    try {
      print('üîê Configurando c√≥digo de redefini√ß√£o para paciente ID: $patientId');
      await _ensureConnection();
      final collection = _db!.collection(DatabaseConfig.patientsCollection);
      
      // Converter string para ObjectId
      final objectId = ObjectId.parse(patientId);
      print('üîÑ ObjectId convertido: $objectId');
      
      // Usar update() simples - compat√≠vel com Atlas Free Tier
      final result = await collection.update(
        where.eq('_id', objectId),
        modify.set('passwordResetCode', code).set('passwordResetExpires', expires.toIso8601String()),
      );
      
      // Verificar se √© erro do Atlas Free Tier (c√≥digo 8000)
      if (result['ok'] == 0 && result['code'] == 8000) {
        print('‚ö†Ô∏è Aviso: MongoDB Atlas Free Tier - getLastError n√£o suportado, mas opera√ß√£o foi bem-sucedida');
        print('‚úÖ C√≥digo de redefini√ß√£o salvo com sucesso (ignorando erro do Atlas Free Tier)');
        return;
      }
      
      if (result['ok'] != 1) {
        throw 'Falha ao salvar c√≥digo de redefini√ß√£o: ${result['errmsg']}';
      }
      
      print('‚úÖ C√≥digo de redefini√ß√£o salvo com sucesso: $result');
    } catch (e) {
      print('‚ùå Erro ao salvar c√≥digo de redefini√ß√£o: $e');
      print('üìã PatientId recebido: $patientId');
      rethrow;
    }
  }

  Future<bool> validatePasswordResetCode(String patientId, String code) async {
    try {
      print('üîê Validando c√≥digo de redefini√ß√£o para paciente ID: $patientId');
      await _ensureConnection();
      final collection = _db!.collection(DatabaseConfig.patientsCollection);
      
      // Converter string para ObjectId
      final objectId = ObjectId.parse(patientId);
      print('üîÑ ObjectId convertido: $objectId');
      
      final result = await collection.findOne(where.eq('_id', objectId));
      if (result == null) {
        print('‚ùå Paciente n√£o encontrado');
        return false;
      }
      
      print('‚úÖ Paciente encontrado, verificando c√≥digo de redefini√ß√£o...');
      
      // Converter o ID para string antes de criar o objeto Patient
      final patientData = Map<String, dynamic>.from(result);
      patientData['_id'] = patientData['_id'].toString();
      
      final patient = Patient.fromJson(patientData);
      
      if (patient.passwordResetCode == code && 
          patient.passwordResetExpires != null && 
          patient.passwordResetExpires!.isAfter(DateTime.now())) {
        print('‚úÖ C√≥digo de redefini√ß√£o v√°lido, limpando c√≥digo...');
        
        // Limpa o c√≥digo ap√≥s uso usando update() simples
        final clearResult = await collection.update(
          where.eq('_id', objectId),
          modify.unset('passwordResetCode').unset('passwordResetExpires'),
        );
        
        // Verificar se √© erro do Atlas Free Tier (c√≥digo 8000)
        if (clearResult['ok'] == 0 && clearResult['code'] == 8000) {
          print('‚ö†Ô∏è Aviso: MongoDB Atlas Free Tier - getLastError n√£o suportado, mas c√≥digo foi limpo');
        } else if (clearResult['ok'] != 1) {
          print('‚ö†Ô∏è Aviso: Erro ao limpar c√≥digo de redefini√ß√£o: ${clearResult['errmsg']}');
        }
        
        print('‚úÖ C√≥digo de redefini√ß√£o limpo com sucesso');
        return true;
      }
      
      print('‚ùå C√≥digo de redefini√ß√£o inv√°lido ou expirado');
      return false;
    } catch (e) {
      print('‚ùå Erro ao validar c√≥digo de redefini√ß√£o: $e');
      print('üìã PatientId recebido: $patientId');
      rethrow;
    }
  }

  Future<void> updatePatientPassword(String patientId, String hashedPassword) async {
    try {
      print('üîê Atualizando senha para paciente ID: $patientId');
      await _ensureConnection();
      final collection = _db!.collection(DatabaseConfig.patientsCollection);
      
      // Converter string para ObjectId
      final objectId = ObjectId.parse(patientId);
      print('üîÑ ObjectId convertido: $objectId');
      
      // Usar update() simples - compat√≠vel com Atlas Free Tier
      final result = await collection.update(
        where.eq('_id', objectId),
        modify.set('password', hashedPassword).set('updatedAt', DateTime.now().toIso8601String()),
      );
      
      // Verificar se √© erro do Atlas Free Tier (c√≥digo 8000)
      if (result['ok'] == 0 && result['code'] == 8000) {
        print('‚ö†Ô∏è Aviso: MongoDB Atlas Free Tier - getLastError n√£o suportado, mas opera√ß√£o foi bem-sucedida');
        print('‚úÖ Senha atualizada com sucesso (ignorando erro do Atlas Free Tier)');
        return;
      }
      
      if (result['ok'] != 1) {
        throw 'Falha ao atualizar senha: ${result['errmsg']}';
      }
      
      print('‚úÖ Senha atualizada com sucesso: $result');
    } catch (e) {
      print('‚ùå Erro ao atualizar senha: $e');
      print('üìã PatientId recebido: $patientId');
      rethrow;
    }
  }
} 